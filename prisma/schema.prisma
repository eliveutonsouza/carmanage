// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id                   String          @id @default(cuid())
  name                 String?
  email                String          @unique
  emailVerified        DateTime?
  passwordHash         String?
  image                String?
  acceptedReportEmails Boolean         @default(true)
  accounts             Account[]
  sessions             Session[]
  // Optional for WebAuthn support
  Authenticator        Authenticator[]

  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  Car                         Car[]
  ReportCarMaintenanceHistory ReportCarMaintenanceHistory[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Car {
  id             String           @id @default(cuid())
  name           String
  plate          String           @unique
  userId         String
  user           User             @relation(fields: [userId], references: [id])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  CarMaintenance CarMaintenance[]
}

enum CarMaintenanceStatus {
  VENCIDA
  CONFORME
}

enum CarMaintenanceType {
  PREVENTIVA
  CORRETIVA
}

model CarMaintenance {
  id              String               @id @default(cuid())
  name            String
  type            CarMaintenanceType   @default(PREVENTIVA)
  lastMaintenance DateTime
  nextMaintenance DateTime
  status          CarMaintenanceStatus @default(CONFORME)
  carId           String
  car             Car                  @relation(fields: [carId], references: [id])
}

model ReportCarMaintenanceHistory {
  id         String   @id @default(cuid())
  nameReport String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}
